{"version":3,"sources":["components/TagsList/TagsList.js","pages/Questions/locales/RU.js","utils/question-form.js","api/questions-page.js","pages/Questions/Questions.js"],"names":["TagsList","filterList","name","handleClick","classNames","sectionClass","join","trim","classNamesList","length","className","map","item","value","filter","title","isActive","onClick","defaultProps","questionsPageTexts","headTitle","MAIN_PAGE_TITLE","QUESTIONS_TITLE","headDescription","textStubNoData","formPlaceholder","formSubmitButton","formSubmitButtonLoading","questionForm","beforeSubmit","titleClass","formVisibilityClass","successSubmit","errorSubmit","getQuestionsPageData","limit","offset","tags","axios","get","baseURL","apiUrl","params","then","response","data","catch","err","Promise","reject","getQuestionsPageTags","Questions","currentUser","useContext","CurrentUserContext","ErrorsContext","serverError","setError","clearError","errorsString","getServerErrors","unauthorized","ERROR_CODES","badRequest","useState","isPageError","setIsPageError","isWaitingResponse","setIsWaitingResponse","mainQuestion","setMainQuestion","state","useLocation","questionFromMainPage","question","searchQuestionId","id","isMainQuestionVisible","setIsMainQuestionVisible","questionFormState","setQuestionFormState","useFormWithValidation","values","handleChange","errors","isValid","resetForm","setFormState","isError","setTimeout","handleSubmit","evt","preventDefault","post","postQuestion","status","finally","filtersAndPaginationSettings","apiGetDataCallback","apiGetFiltersCallback","apiFilterNames","pageSize","useFiltrationAndPagination","dataToRender","filters","isPageLoading","isFiltersUsed","isPaginationUsed","totalPages","pageIndex","changePageIndex","changeFilter","useEffect","filteredDataToRender","isCentered","BasePage","AnimatedPageContainer","titleText","ERROR_MESSAGES","generalErrorMessage","renderFilters","renderQuestionsWithPaginate","onSubmit","noValidate","type","placeholder","onChange","minLength","questionFormValidationSettings","maxLength","required","error","color","isSubmittable","isDisabled","renderPageContent","isPaginate","renderMainQuestion","CardQuestion","isQuestionsPage","pageCount","isOpenByDefault"],"mappings":"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","file":"static/js/17.76997926.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { PseudoButtonTag } from '../utils';\nimport './TagsList.scss';\n\nconst centeringFiltersMaxLength = 3;\n\nfunction TagsList({ filterList, name, handleClick, sectionClass }) {\n  const classNames = ['tags', sectionClass].join(' ').trim();\n  const classNamesList = [\n    'tags__list',\n    filterList.length > centeringFiltersMaxLength ? 'tags__list_mobile' : '',\n  ]\n    .join(' ')\n    .trim();\n\n  return (\n    <div className={classNames}>\n      <ul className={classNamesList}>\n        {filterList.map((item) => (\n          <li className=\"tags__list-item\" key={item?.name}>\n            <PseudoButtonTag\n              name={name}\n              value={item?.filter}\n              title={item?.name}\n              isActive={item?.isActive}\n              onClick={handleClick}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nTagsList.propTypes = {\n  filterList: PropTypes.arrayOf(PropTypes.any),\n  sectionClass: PropTypes.string,\n  name: PropTypes.string,\n  handleClick: PropTypes.func,\n};\n\nTagsList.defaultProps = {\n  filterList: [],\n  sectionClass: '',\n  name: '',\n  handleClick: () => {},\n};\n\nexport default TagsList;\n","import { MAIN_PAGE_TITLE, QUESTIONS_TITLE } from '../../../config/routes';\n\nconst questionsPageTexts = {\n  headTitle: `${MAIN_PAGE_TITLE} | ${QUESTIONS_TITLE}`,\n  headDescription: 'Страница с ответами на основные вопросы.',\n  title: 'Ответы на вопросы',\n  textStubNoData:\n    'В данный момент страница вопросов пуста. Возвращайтесь позже!',\n  formPlaceholder: 'Введите вопрос',\n  formSubmitButton: 'Отправить',\n  formSubmitButtonLoading: 'Отправка...',\n};\n\nexport default questionsPageTexts;\n","const questionForm = {\n  beforeSubmit: {\n    title:\n      'Если вы не нашли ответ на свой вопрос — напишите нам, и мы включим его в список',\n    titleClass: '',\n    formVisibilityClass: '',\n  },\n  successSubmit: {\n    title:\n      'Спасибо! Мы приняли ваш вопрос. Ваш вопрос опубликуют, как только он пройдет проверку и модератор даст на него ответ!',\n    titleClass: 'add-question__title_success',\n    formVisibilityClass: 'question-form_invisible',\n  },\n  errorSubmit: {\n    title:\n      'Произошла ошибка при отправке вашего вопроса! Попробуйте повторить позже или обратиться в службу поддержки!',\n    titleClass: 'add-question__title_error',\n  },\n};\n\nexport default questionForm;\n","import axios from 'axios';\nimport { apiUrl, baseURL } from '../config/config';\n\n// получить данные страницы\nfunction getQuestionsPageData({ limit, offset, tags }) {\n  return axios\n    .get(`${baseURL}${apiUrl}/questions/`, {\n      params: { limit, offset, tags },\n    })\n    .then((response) => response.data)\n    .catch((err) => Promise.reject(err?.response));\n}\n\n// получить список фильтров\nfunction getQuestionsPageTags() {\n  return axios\n    .get(`${baseURL}${apiUrl}/questions/tags/`)\n    .then((response) => response.data)\n    .catch((err) => Promise.reject(err?.response));\n}\n\n// постинг вопроса\nfunction postQuestion(question) {\n  return axios\n    .post(`${baseURL}${apiUrl}/questions/`, question)\n    .then((response) => response.data)\n    .catch((err) => Promise.reject(err?.response));\n}\n\n// получение одного вопроса\nfunction getQuestionById(id) {\n  return axios\n    .get(`${baseURL}${apiUrl}/questions/${id}/`)\n    .then((response) => response.data)\n    .catch((err) => Promise.reject(err?.response));\n}\n\nexport {\n  getQuestionsPageData,\n  getQuestionsPageTags,\n  postQuestion,\n  getQuestionById,\n};\n","import { useContext, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport questionsPageTexts from './locales/RU';\nimport { CurrentUserContext, ErrorsContext } from '../../contexts';\nimport { ERROR_CODES, ERROR_MESSAGES } from '../../config/constants';\nimport { useFiltrationAndPagination, useFormWithValidation } from '../../hooks';\nimport questionForm from '../../utils/question-form';\nimport getServerErrors from '../../utils/form-errors';\nimport {\n  getQuestionById,\n  getQuestionsPageData,\n  getQuestionsPageTags,\n  postQuestion,\n} from '../../api/questions-page';\nimport {\n  AnimatedPageContainer,\n  BasePage,\n  Button,\n  CardQuestion,\n  Input,\n  Loader,\n  Paginate,\n  TagsList,\n  TitleH1,\n  TitleH2,\n} from './index';\nimport './Questions.scss';\nimport { questionFormValidationSettings } from '../../config/validation-settings';\n\nconst {\n  headTitle,\n  headDescription,\n  title,\n  textStubNoData,\n  formPlaceholder,\n  formSubmitButton,\n  formSubmitButtonLoading,\n} = questionsPageTexts;\n\nconst pageSize = 10;\n\nconst formTransformDelay = 4000;\n\nfunction Questions() {\n  const { currentUser } = useContext(CurrentUserContext);\n  const { serverError, setError, clearError } = useContext(ErrorsContext);\n\n  const errorsString = serverError ? getServerErrors(serverError) : '';\n  const { unauthorized, badRequest } = ERROR_CODES;\n\n  const [isPageError, setIsPageError] = useState(false);\n  const [isWaitingResponse, setIsWaitingResponse] = useState(false);\n\n  // определение редиректа с Главной + обработка редиректа поиска\n  const [mainQuestion, setMainQuestion] = useState(null);\n  const { state } = useLocation();\n\n  const questionFromMainPage = state?.question;\n  const searchQuestionId = state?.id;\n\n  // показывать ли выбранный вопрос (на главной или в поиске)\n  const [isMainQuestionVisible, setIsMainQuestionVisible] = useState(false);\n\n  // форма\n  const [questionFormState, setQuestionFormState] = useState(\n    questionForm.beforeSubmit\n  );\n  // валидация\n  const { values, handleChange, errors, isValid, resetForm } =\n    useFormWithValidation();\n\n  // форма вопросов\n  const setFormState = (isError) => {\n    if (isError) {\n      // форму не чистим!\n      setQuestionFormState(questionForm.errorSubmit);\n    } else {\n      setQuestionFormState(questionForm.successSubmit);\n      // вернулись к изначальной\n      setTimeout(() => {\n        resetForm();\n        clearError();\n        setQuestionFormState(questionForm.beforeSubmit);\n      }, formTransformDelay);\n    }\n  };\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    const { question } = values;\n    setIsWaitingResponse(true);\n    postQuestion({ title: question })\n      .then(() => setFormState(false))\n      .catch((err) => {\n        if (err?.status === badRequest || err?.status === unauthorized)\n          setError(err?.data);\n        else setFormState(true);\n      })\n      .finally(() => setIsWaitingResponse(false));\n  };\n\n  // фильтрация и пагинация\n  const filtersAndPaginationSettings = {\n    apiGetDataCallback: getQuestionsPageData,\n    apiGetFiltersCallback: getQuestionsPageTags,\n    apiFilterNames: {\n      tags: 'tags',\n    },\n    pageSize,\n    setIsPageError,\n  };\n\n  const {\n    dataToRender,\n    filters,\n    isPageLoading,\n    isFiltersUsed,\n    isPaginationUsed,\n    totalPages,\n    pageIndex,\n    changePageIndex,\n    changeFilter,\n  } = useFiltrationAndPagination(filtersAndPaginationSettings);\n\n  // эффекты рулят показом главного вопроса\n  useEffect(() => {\n    if (searchQuestionId) {\n      getQuestionById(searchQuestionId)\n        .then((question) => {\n          setIsMainQuestionVisible(true);\n          setMainQuestion(question);\n        })\n        .catch(() => setIsPageError(true));\n    }\n\n    if (questionFromMainPage) {\n      setIsMainQuestionVisible(true);\n      setMainQuestion(questionFromMainPage);\n    }\n  }, [searchQuestionId, questionFromMainPage]);\n\n  useEffect(() => {\n    if (isMainQuestionVisible) {\n      setIsMainQuestionVisible(false);\n    }\n  }, [isPaginationUsed, isFiltersUsed]);\n\n  // фильтр первой выдачи от главного вопроса\n  const filterDataFormMainQuestion = (data) => {\n    if (questionFromMainPage && isMainQuestionVisible) {\n      return data.filter((question) => question.id !== questionFromMainPage.id);\n    }\n    if (searchQuestionId && isMainQuestionVisible) {\n      return data.filter((question) => question.id !== searchQuestionId);\n    }\n    return data;\n  };\n\n  // итоговые данные\n  const filteredDataToRender = filterDataFormMainQuestion(dataToRender);\n\n  // глобальный лоадер\n  if (isPageLoading) {\n    return <Loader isCentered />;\n  }\n\n  return (\n    <BasePage headTitle={headTitle} headDescription={headDescription}>\n      <section className=\"questions-page page__section fade-in\">\n        {renderPageContent()}\n      </section>\n    </BasePage>\n  );\n\n  function renderPageContent() {\n    if (isPageError || !filteredDataToRender.length) {\n      return renderAnimatedContainer();\n    }\n\n    return (\n      <>\n        <TitleH1 title={title} sectionClass=\"questions__title\" />\n\n        {renderFilters()}\n\n        {renderQuestionsWithPaginate()}\n\n        {currentUser && renderQuestionForm()}\n      </>\n    );\n  }\n\n  // заглушка\n  function renderAnimatedContainer() {\n    return (\n      <AnimatedPageContainer\n        titleText={\n          isPageError\n            ? ERROR_MESSAGES.generalErrorMessage.title\n            : textStubNoData\n        }\n      />\n    );\n  }\n\n  function renderFilters() {\n    // учитываем кнопку ВСЕ\n    if (filters.length > 2) {\n      return (\n        <TagsList filterList={filters} name=\"tag\" handleClick={changeFilter} />\n      );\n    }\n    return null;\n  }\n\n  function renderQuestionsWithPaginate() {\n    if (isFiltersUsed) {\n      return <Loader isPaginate />;\n    }\n\n    return (\n      <>\n        {isPaginationUsed ? <Loader isPaginate /> : renderQuestionsContainer()}\n\n        {totalPages > 1 && (\n          <Paginate\n            sectionClass=\"cards-section__pagination\"\n            pageCount={totalPages}\n            value={pageIndex}\n            onChange={changePageIndex}\n          />\n        )}\n      </>\n    );\n  }\n\n  function renderQuestionsContainer() {\n    return (\n      <>\n        <ul className=\"questions\">\n          {renderMainQuestion()}\n          {filteredDataToRender.map((question) => (\n            <li\n              className=\"questions__list-item slide-bottom-up\"\n              key={question?.id}\n            >\n              <CardQuestion\n                data={question}\n                sectionClass=\"card__questions_type_questions-page\"\n                isQuestionsPage\n              />\n            </li>\n          ))}\n        </ul>\n      </>\n    );\n  }\n\n  function renderMainQuestion() {\n    if (isMainQuestionVisible && mainQuestion) {\n      return (\n        <li className=\"questions__list-item fade-in\">\n          <CardQuestion\n            data={mainQuestion}\n            sectionClass=\"card__questions_type_questions-page\"\n            isQuestionsPage\n            isOpenByDefault\n          />\n        </li>\n      );\n    }\n\n    return null;\n  }\n\n  // форма вопросов\n  function renderQuestionForm() {\n    return (\n      <>\n        <section className=\"add-question fade-in\">\n          <TitleH2\n            sectionClass={`add-question__title ${questionFormState.titleClass}`}\n            title={questionFormState.title}\n          />\n          <form\n            className={`question-form ${questionFormState.formVisibilityClass}`}\n            onSubmit={(evt) => handleSubmit(evt)}\n            noValidate\n          >\n            <fieldset className=\"question-form__add-question\">\n              <Input\n                id=\"questionsFormInput\"\n                type=\"text\"\n                name=\"question\"\n                placeholder={formPlaceholder}\n                onChange={handleChange}\n                value={values?.question}\n                minLength={questionFormValidationSettings.question.minLength}\n                maxLength={questionFormValidationSettings.question.maxLength}\n                required\n                error={errors?.question}\n                sectionClass=\"input__question-form\"\n              />\n              <Button\n                title={\n                  isWaitingResponse ? formSubmitButtonLoading : formSubmitButton\n                }\n                color=\"black\"\n                sectionClass=\"question-form__button\"\n                isSubmittable\n                isDisabled={isWaitingResponse || !isValid}\n              />\n            </fieldset>\n            <span className=\"form-error-message\">{errorsString}</span>\n          </form>\n        </section>\n      </>\n    );\n  }\n}\n\nexport default Questions;\n"],"sourceRoot":""}