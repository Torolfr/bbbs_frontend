{"version":3,"sources":["components/TagsList/TagsList.js","pages/Calendar/locales/RU.js","api/afisha-page.js","pages/Calendar/Calendar.js"],"names":["TagsList","filterList","name","handleClick","classNames","sectionClass","join","trim","classNamesList","length","className","map","item","value","filter","title","isActive","onClick","defaultProps","calendarPageTexts","headTitle","MAIN_PAGE_TITLE","AFISHA_TITLE","headDescription","textStubNoData","getCalendarPageData","limit","offset","months","axios","get","baseURL","apiUrl","params","then","response","data","catch","err","Promise","reject","getActiveMonthTags","PAGE_SIZE_PAGINATE","small","medium","default","MAX_SCREEN_WIDTH","Calendar","currentUser","useContext","CurrentUserContext","PopupsContext","openPopupLogin","openPopupAboutEvent","state","useLocation","pageSize","usePageWidth","useState","calendarPageData","setCalendarPageData","isCityChanged","setIsCityChanged","isPageError","setIsPageError","filtersAndPaginationSettings","apiGetDataCallback","apiGetFiltersCallback","apiFilterNames","tags","isCalendarPage","useFiltrationAndPagination","dataToRender","filters","isPageLoading","isFiltersUsed","isPaginationUsed","totalPages","pageIndex","changePageIndex","changeFilter","firstPageRender","useEffect","window","scrollTo","top","city","id","res","setLocalStorageData","localStAfishaEvent","useEventBooking","handleEventBooking","selectedEvent","isWaitingResponse","event","isCentered","BasePage","isPaginate","AnimatedPageContainer","titleText","ERROR_MESSAGES","generalErrorMessage","renderFilters","renderEventCardsContainer","renderPagination","renderPageContent","cardData","CardCalendar","onEventSignUpClick","onEventDescriptionClick","loadingEventId","getLocalStorageData","undefined","pageCount","onChange"],"mappings":"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","file":"static/js/16.95fb45c9.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { PseudoButtonTag } from '../utils';\nimport './TagsList.scss';\n\nconst centeringFiltersMaxLength = 3;\n\nfunction TagsList({ filterList, name, handleClick, sectionClass }) {\n  const classNames = ['tags', sectionClass].join(' ').trim();\n  const classNamesList = [\n    'tags__list',\n    filterList.length > centeringFiltersMaxLength ? 'tags__list_mobile' : '',\n  ]\n    .join(' ')\n    .trim();\n\n  return (\n    <div className={classNames}>\n      <ul className={classNamesList}>\n        {filterList.map((item) => (\n          <li className=\"tags__list-item\" key={item?.name}>\n            <PseudoButtonTag\n              name={name}\n              value={item?.filter}\n              title={item?.name}\n              isActive={item?.isActive}\n              onClick={handleClick}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nTagsList.propTypes = {\n  filterList: PropTypes.arrayOf(PropTypes.any),\n  sectionClass: PropTypes.string,\n  name: PropTypes.string,\n  handleClick: PropTypes.func,\n};\n\nTagsList.defaultProps = {\n  filterList: [],\n  sectionClass: '',\n  name: '',\n  handleClick: () => {},\n};\n\nexport default TagsList;\n","import { AFISHA_TITLE, MAIN_PAGE_TITLE } from '../../../config/routes';\n\nconst calendarPageTexts = {\n  headTitle: `${MAIN_PAGE_TITLE} | ${AFISHA_TITLE}`,\n  headDescription: 'Календарь событий и мероприятий для наставников.',\n  title: AFISHA_TITLE,\n  textStubNoData: 'Мы работаем над планом мероприятий на ближайшие месяцы.',\n};\n\nexport default calendarPageTexts;\n","import axios from 'axios';\nimport { apiUrl, baseURL } from '../config/config';\n\n// получить дату страницы\nfunction getCalendarPageData({ limit, offset, months }) {\n  return axios\n    .get(`${baseURL}${apiUrl}/afisha/events/`, {\n      params: { limit, offset, months },\n    })\n    .then((response) => response.data)\n    .catch((err) => Promise.reject(err?.response));\n}\n\n// получить тегсы-месяцы (список фильтров)\nfunction getActiveMonthTags() {\n  return axios\n    .get(`${baseURL}${apiUrl}/afisha/events/months/`)\n    .then((response) => response.data.months)\n    .catch((err) => Promise.reject(err?.response));\n}\n\n// получение одного события\nfunction getEventById(id) {\n  return axios\n    .get(`${baseURL}${apiUrl}/afisha/events/${id}/`)\n    .then((response) => response.data)\n    .catch((err) => Promise.reject(err?.response));\n}\n\nexport { getCalendarPageData, getActiveMonthTags, getEventById };\n","import { useContext, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport calendarPageTexts from './locales/RU';\nimport { CurrentUserContext, PopupsContext } from '../../contexts';\nimport { ERROR_MESSAGES, localStAfishaEvent } from '../../config/constants';\nimport {\n  useEventBooking,\n  useFiltrationAndPagination,\n  usePageWidth,\n} from '../../hooks';\nimport {\n  getLocalStorageData,\n  setLocalStorageData,\n} from '../../hooks/useLocalStorage';\nimport {\n  getActiveMonthTags,\n  getCalendarPageData,\n  getEventById,\n} from '../../api/afisha-page';\nimport {\n  AnimatedPageContainer,\n  BasePage,\n  CardCalendar,\n  Loader,\n  Paginate,\n  TagsList,\n  TitleH1,\n} from './index';\nimport './Calendar.scss';\n\nconst { headTitle, headDescription, title, textStubNoData } = calendarPageTexts;\n\nconst PAGE_SIZE_PAGINATE = {\n  small: 6,\n  medium: 8,\n  default: 12,\n};\n\nconst MAX_SCREEN_WIDTH = {\n  small: 1024,\n  medium: 1440,\n};\n\nfunction Calendar() {\n  const { currentUser } = useContext(CurrentUserContext);\n  const { openPopupLogin, openPopupAboutEvent } = useContext(PopupsContext);\n  const { state } = useLocation();\n\n  // определяет, сколько карточек показывать на странице в зависимости от ширины экрана\n  const { pageSize } = usePageWidth(MAX_SCREEN_WIDTH, PAGE_SIZE_PAGINATE);\n  // стейт для работы с мероприятиями\n  const [calendarPageData, setCalendarPageData] = useState(null);\n  // флаг смены города - нужно снова загружать данные\n  const [isCityChanged, setIsCityChanged] = useState(false);\n  // стейт ошибки\n  const [isPageError, setIsPageError] = useState(false);\n\n  // фильтрация и пагинация\n  const filtersAndPaginationSettings = {\n    apiGetDataCallback: getCalendarPageData,\n    apiGetFiltersCallback: getActiveMonthTags,\n    apiFilterNames: {\n      tags: 'months',\n    },\n    pageSize,\n    setIsPageError,\n    isCalendarPage: true,\n  };\n\n  const {\n    dataToRender,\n    filters,\n    isPageLoading,\n    isFiltersUsed,\n    isPaginationUsed,\n    totalPages,\n    pageIndex,\n    changePageIndex,\n    changeFilter,\n    firstPageRender,\n  } = useFiltrationAndPagination(filtersAndPaginationSettings);\n\n  // показ попапа логина и отложенная загрузка\n  useEffect(() => {\n    if (!currentUser) {\n      openPopupLogin();\n    } else if (isPageLoading && pageSize) {\n      firstPageRender();\n    }\n  }, [currentUser, pageSize]);\n\n  // обновление стейта данных для работы\n  useEffect(() => {\n    setCalendarPageData(dataToRender);\n    if (isCityChanged) setIsCityChanged(false);\n  }, [dataToRender]);\n\n  // повторная загрузка при смене города\n  useEffect(() => {\n    if (currentUser && !isPageLoading) {\n      setIsCityChanged(true);\n      firstPageRender();\n      window.scrollTo({ top: 0 });\n    }\n  }, [currentUser?.city]);\n\n  // Открытие попапа при переходе из поиска\n  useEffect(() => {\n    if (state) {\n      getEventById(state.id)\n        .then((res) => {\n          setLocalStorageData(localStAfishaEvent, res);\n          openPopupAboutEvent();\n        })\n        .catch(() => setIsPageError(true));\n    }\n  }, [state]);\n\n  // подписка/отписка от ивентов\n  const { handleEventBooking, selectedEvent, isWaitingResponse } =\n    useEventBooking();\n  useEffect(() => {\n    if (selectedEvent) {\n      setCalendarPageData(() =>\n        calendarPageData.map((event) =>\n          event.id === selectedEvent.id ? selectedEvent : event\n        )\n      );\n    }\n  }, [selectedEvent]);\n\n  // глобальный лоадер при первой загрузке страницы или пока незалогинен\n  if (isPageLoading || !currentUser) {\n    return <Loader isCentered />;\n  }\n\n  return (\n    <BasePage headTitle={headTitle} headDescription={headDescription}>\n      <section className=\"calendar-page page__section fade-in\">\n        {renderPageContent()}\n      </section>\n    </BasePage>\n  );\n\n  function renderPageContent() {\n    // залогинен и (ошибка или нет ивентов для города вообще)\n    if (currentUser && (isPageError || !calendarPageData?.length)) {\n      return isCityChanged ? <Loader isPaginate /> : renderAnimatedContainer();\n    }\n\n    // залогинен и есть ивенты\n    if (currentUser) {\n      return (\n        <>\n          <TitleH1 title={title} sectionClass=\"calendar-page__title\" />\n          <div className=\"calendar-page__container\">\n            {isCityChanged ? <Loader isPaginate /> : renderFiltersAndCards()}\n          </div>\n        </>\n      );\n    }\n\n    return null;\n  }\n\n  // отрисовка заглушки\n  function renderAnimatedContainer() {\n    return (\n      <AnimatedPageContainer\n        titleText={\n          isPageError\n            ? ERROR_MESSAGES.generalErrorMessage.title\n            : textStubNoData\n        }\n      />\n    );\n  }\n\n  function renderFiltersAndCards() {\n    return (\n      <>\n        {renderFilters()}\n\n        {isFiltersUsed ? (\n          <Loader isPaginate />\n        ) : (\n          <>\n            {renderEventCardsContainer()}\n            {renderPagination()}\n          </>\n        )}\n      </>\n    );\n  }\n\n  function renderFilters() {\n    // учитываем кнопку ВСЕ\n    if (filters.length > 2) {\n      return (\n        <TagsList\n          filterList={filters}\n          name=\"month\"\n          handleClick={changeFilter}\n        />\n      );\n    }\n    return null;\n  }\n\n  // отрисовка карточек ивентов\n  function renderEventCardsContainer() {\n    if (isPaginationUsed) {\n      return <Loader isPaginate />;\n    }\n\n    return (\n      <div className=\"calendar-page__grid\">\n        {calendarPageData.map((cardData) => (\n          <CardCalendar\n            key={cardData.id}\n            cardData={cardData}\n            onEventSignUpClick={handleEventBooking}\n            onEventDescriptionClick={openPopupAboutEvent}\n            sectionClass=\"scale-in\"\n            isWaitingResponse={isWaitingResponse}\n            loadingEventId={\n              isWaitingResponse\n                ? getLocalStorageData(localStAfishaEvent)?.id\n                : undefined\n            }\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPagination() {\n    if (totalPages > 1) {\n      return (\n        <Paginate\n          sectionClass=\"cards-section__pagination\"\n          pageCount={totalPages}\n          value={pageIndex}\n          onChange={changePageIndex}\n        />\n      );\n    }\n    return null;\n  }\n}\n\nexport default Calendar;\n"],"sourceRoot":""}